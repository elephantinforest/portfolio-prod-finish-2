name: Web API Deploy Pipeline

on:
  push:
    paths:
      - ".github/workflows/**"
      - "src/**"

env:
  AWS_REGION: us-west-2
  ECS_CLUSTER: my-app-cluster
  ECS_SERVICE: my-app-api-service
  ECR_REPOSITORY: my-app-api
  ECS_TASK_DEFINITION_API: cicd-section/.aws/task-def-api.json

permissions:
  id-token: write
  contents: read

jobs:
  Integration:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4' # 使用するPHPのバージョンを指定

      - name: Install Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php --install-dir=/usr/local/bin --filename=composer
          php -r "unlink('composer-setup.php');"

      - name: List directory contents
        run: |
          ls -la /home/runner/work/portfolio-prod-finish-2
          ls -la /home/runner/work/portfolio-prod-finish-2/src

      - name: Install Composer dependencies
        run: |
          cd /home/runner/work/portfolio-prod-finish-2/portfolio-prod-finish-2
          composer install

      - name: Set up Docker
        run: docker-compose up -d

      - name: Run Unit Test
        run: |
          cd /home/runner/work/portfolio-prod-finish-2/portfolio-prod-finish-2
          composer run-script phpunit



    # Test/build
#   test-and-build:
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: cicd-section/api
#     steps:
#       # Checkout code
#       - uses: actions/checkout@v4

#       - name: Run Tests and Build an Image
#         run: docker image build -t temp_api_image:latest .

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-region: ${{ env.AWS_REGION }}
#           role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Push the image to Amazon ECR
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         run: |
#           docker image tag temp_api_image:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
#           docker image push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
#           echo $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} > api-image-uri.txt

#       - name: Upload the image URI file as an artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: api-image-uri
#           path: cicd-section/api/api-image-uri.txt

#   # Deploy
#   deploy:
#     runs-on: ubuntu-latest
#     needs: [test-and-build]

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-region: ${{ env.AWS_REGION }}
#           role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

#       - name: Download the artifact
#         uses: actions/download-artifact@v2
#         with:
#           name: api-image-uri
#           path: artifacts

#       - name: Define the image URI
#         run: |
#           echo "API_IMAGE_URI=$(cat artifacts/api-image-uri.txt)" >> $GITHUB_ENV

#       - name: Fill in the new image URI in the Amazon ECS task definition
#         id: render-task-def
#         uses: aws-actions/amazon-ecs-render-task-definition@v1
#         with:
#           task-definition: ${{ env.ECS_TASK_DEFINITION_API }}
#           container-name: api
#           image: ${{ env.API_IMAGE_URI }}

#       - name: Deploy ECS task
#         uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#         with:
#           task-definition: ${{ steps.render-task-def.outputs.task-definition }}
#           service: ${{ env.ECS_SERVICE }}
#           cluster: ${{ env.ECS_CLUSTER }}
#           wait-for-service-stability: true
