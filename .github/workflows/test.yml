name: Web API Deploy Pipeline

on:
  push:
    paths:
      - ".github/workflows/**"
      - "src/**"

env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: my-app-cluster
  ECS_SERVICE: my-app-api-service
  ECR_REPOSITORY: portfolio-prod-finish-2
  ECS_TASK_DEFINITION_API: cicd-section/.aws/task-def-api.json

permissions:
  id-token: write
  contents: read

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '7.4' # 使用するPHPのバージョンを指定

      - name: Install Composer
        run: |
          php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
          php composer-setup.php --install-dir=/usr/local/bin --filename=composer
          php -r "unlink('composer-setup.php');"

      - name: Set up Docker
        run: |
             docker-compose up -d
             docker-compose exec -T db mysqladmin --silent --wait=30 -uroot -ppassword ping || exit 1
             docker-compose exec -T test_db mysqladmin --silent --wait=30 -uroot -ppassword ping || exit 1

 # Docker コンテナに入るためのスクリプトを追加
      - name: Enter Docker Container
        run: |
             docker-compose exec -T app php /var/www/html/src/migration/initialize_all_table.php
             docker-compose exec -T app php /var/www/html/src/migration/tests/initialize_all_table.php
             docker-compose exec -T app composer install
             docker-compose exec -T app npm install
             docker-compose exec -T app composer phpunit

   # Docker コンテナを停止する場合（オプション）
      - name: Stop Docker Containers
        run: docker-compose down

      - name: Run Tests and Build an Image
        run: docker image build -t temp_api_image:latest .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker image tag portfolio-aws-finish_app:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker image push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          echo $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} > api-image-uri.txt

      - name: Upload the image URI file as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: api-image-uri
          path: src/api-image-uri.txt
